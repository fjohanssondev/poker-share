// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  url      = env("DATABASE_URL")
}

model Game {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isFinished   Boolean  @default(false)
  buyIn        Int
  initialStack Int
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  String

  participants GameParticipant[]
}

model Participant {
  id                 String            @id @default(cuid())
  name               String
  isRegisteredUser   Boolean           @default(false)
  user               User?             @relation(fields: [userId], references: [id])
  userId             String?
  gameParticipations GameParticipant[]
}

model GameParticipant {
  gameId         String
  participantId  String
  remainingChips Int
  cashOutAmount  Decimal?
  game           Game        @relation(fields: [gameId], references: [id])
  participant    Participant @relation(fields: [participantId], references: [id])

  @@id([gameId, participantId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  game          Game[]
  Participant   Participant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
